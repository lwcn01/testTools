#!/usr/bin/python
# -*- coding: utf-8 -*-
# @Author liuwei
import os,urllib
from urllib import request
from tkinter import *
from tkinter import filedialog
from tkinter import scrolledtext
from tkinter import messagebox
from tkinter.constants import END
from tkinter.ttk import Combobox
from PIL import Image as pilImage
from PIL import ImageTk as pilImageTk
from utils import DataCenter as dc
from utils.cpcn import Cpcn
from utils.common import *
from utils.encryptApi import KeyApi
from utils.mylog import MyLogger as myLog

class Base():
    def __init__(self, master):
        self.root = master
        #self.root.config()
        self.root.title('测试小工具v7.0')
        self.root.geometry("700x500")
        self.root.resizable(width=True, height=True)
        self.img=""
        ico_name = Common().base64ToImage(self.img, name='tmp.ico')
        self.root.iconbitmap(default = ico_name)
        os.remove(ico_name)
        Application(self.root)

@myLog()
class Application():
    def __init__(self, master):
        self.master = master
        self.ent = Cpcn()
        self.common = Common()        
        self.app = Frame(self.master)
        self.app.pack()               
        self.createWidgets()
        self.label = Label(self.app, font=("Helvetica", 10))
        self.label.grid(row=0, column=3, padx=10, pady=10, sticky='E')
        self.updateTime()
        self.hash_code = ['SHA1','MD5','SHA256','SHA512']
        self.secretKey = self.ent.SECRET_KEY
        self.certificatePath = self.ent.certificateFilepath
        self.myKeystorePath = self.ent.myKeystoreFilepath
        self.myKeystorePwd = self.ent.myKeystorePassword    
    
    def createWidgets(self): 
        self.menu = Menu(self.master)
        self.file_menu = Menu(self.menu, tearoff=False)
        self.file_menu1 = Menu(self.file_menu, tearoff=False)
        self.file_menu2 = Menu(self.file_menu, tearoff=False)
        self.menu.add_cascade(label='帮助(H)', menu=self.file_menu)
        self.menu.add_command(label="1-加密解密")
        self.menu.add_command(label="2-实时加密", command=lambda: self.startapp('Application2', self.app))
        self.menu.add_command(label="3-测试数据", command=lambda: self.startapp('Application3', self.app))
        self.menu.add_command(label="4-格式数据", command=lambda: self.startapp('Application4', self.app))
        self.menu.add_command(label="5-二维码", command=lambda: self.startapp('Application5', self.app))
        self.menu.add_command(label="6-身份证", command=lambda: self.startapp('Application6', self.app))
        self.menu.add_command(label="7-HTTP请求", command=lambda: self.startapp('Application7', self.app))   
        self.menu.add_command(label = 'README',command= self.openReadMe)
        self.file_menu.add_cascade(label="关于工具", menu = self.file_menu1)
        self.file_menu.add_command(label="版本更新", command = UpdateTool().upgrade)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="退出", command=root.quit)  
        self.text = filter(None, UpdateTool().info().split("\n"))
        for text in self.text:
            self.file_menu1.add_command(label=text.strip())   
        self.file_menu2.add_command(label="剪切", command=lambda : self.keyMap(kevent="cut"))
        self.file_menu2.add_command(label="复制", command=lambda : self.keyMap(kevent="copy"))
        self.file_menu2.add_command(label="粘贴", command=lambda : self.keyMap(kevent="paste"))
        self.master.config(menu=self.menu)
        Label(self.app, text="输入数据", font=("宋体", 10)).grid(row=0, column=0, padx=10, pady=10, sticky='W')
        Label(self.app, text="输出数据", font=("宋体", 10)).grid(row=4, column=0, padx=10, pady=10, sticky='W')
        self.input = Entry(self.app, textvariable=StringVar(), width=92)
        self.input.grid(row=1, column=0, columnspan=4, padx=5, pady=1)
        self.input.focus_set()
        Button(self.app, text="...", command=lambda: self.choose(self.input)).grid(row=1, column=4, padx=1, pady=1, sticky='W')
        Button(self.app, text="加密", command=lambda: self.mainEncrypt()).grid(row=3, column=0, padx=10, pady=10, sticky='W')
        Button(self.app, text="解密", command=self.mainDecrypt).grid(row=3, column=1, padx=10, pady=10, sticky='W')
        Button(self.app, text="重置", command=self.clear).grid(row=3, column=2, padx=10, pady=10, sticky='W')
        self.output = scrolledtext.ScrolledText(self.app, width=92, height=21, font=("宋体", 10), background='#ffffff')
        self.output.grid(row=5, column=0, columnspan=5, padx=5, pady=1)
        self.master.bind("<Button-3>", self.showMenu)
        self.cmb1 = Combobox(self.app, width=9, state="readonly")
        self.cmb1['value'] = ('3DES','SM4','XID','URL','MD5','SM3','UnionSM3','SHA1','SHA256','SHA512','BASE64','AES256','RSA')
        self.cmb1.grid(row=2, column=0, padx=10, pady=10, sticky='W')
        self.cmb1.current(1) #默认sm4
        self.cmb2 = Combobox(self.app, width=6, value=('','HMAC','RSA'), state="readonly")
        self.cmb2.grid(row=2, column=1, padx=10, pady=10, sticky='W')
        self.cmb2.current(0) #默认无
        Label(self.app, text="密钥:", font=("宋体", 10)).grid(row=2, column=2, padx=10, pady=10, sticky='W')
        self.secret_key = Entry(self.app, textvariable=StringVar(), width=56)
        self.secret_key.grid(row=2, column=3, padx=10, pady=10, sticky='W')
        Button(self.app, text="...", command=lambda: self.choose(self.secret_key)).grid(row=2, column=4, padx=1, pady=1, sticky='W')
        
    def showMenu(self,event):
        self.file_menu2.post(event.x_root, event.y_root)
      
    def clear(self):
        self.cmb1.current(1)
        self.cmb2.current(0)
        self.input.delete(0, END)
        self.secret_key.delete(0, END)
        self.output.delete(0.0, END)
        self.input.focus_set()
    
    def keyMap(self,kevent=None):
        if kevent == 'cut':
            self.input.event_generate("<<Cut>>")
            self.output.event_generate("<<Cut>>")
        elif kevent == 'copy':
            self.input.event_generate("<<Copy>>")
            self.output.event_generate("<<Copy>>")
        elif kevent == 'paste':
            self.input.event_generate('<<Paste>>')
    
    def updateTime(self):
        # 获取当前时间
        current_time = time.strftime("%Y-%m-%d %H:%M:%S")#time.strftime("%H:%M:%S")
        # 更新标签的文本
        self.label.config(text=current_time)
        # 递归调用自身，每秒更新一次
        self.app.after(1000, self.updateTime)
        
    @myLog('test_tools')
    def choose(self, route):
        route.delete(0, END)
        #directory = filedialog.askdirectory(title='选择目录', filetypes=[('Excel', '*.xlsx'), ('All Files', '*')])
        filename = filedialog.askopenfilename(title='选择文件', filetypes=[('所有文件', '*')])
        route.insert(INSERT,filename)
    
    @myLog('test_tools')
    def mainEncrypt(self):
        keyway = KeyApi()
        txt = self.input.get()
        way = self.cmb1.get()
        hash_way = self.cmb2.get()
        secret = self.secret_key.get()
        self.output.delete(0.0, END)
        if secret.strip():
            secret = secret.strip()
            certificatePath = secret.strip()
            myKeystorePath = secret.strip() 
        else:
            secret = self.secretKey
            certificatePath = self.certificatePath
            myKeystorePath = self.myKeystorePath    
        if hash_way=="HMAC":
            new_way = hash_way.title() + way
        elif hash_way=="RSA":
            new_way = way.upper() + 'with' + hash_way.upper()
            if way in self.hash_code:
                secret = self.getSecret(keyway, myKeystorePath, crypt='Decrypt')
                if secret == False:
                    return messagebox.showerror('签名失败', 'RSA密钥错误！')
        else:
            hash_way = ""
            new_way = way.upper()
        if way == 'RSA':
            secret = self.getSecret(keyway, certificatePath, crypt='Encrypt')
            if secret == False:
                return messagebox.showerror('加密失败', 'RSA密钥错误！')
        if way == 'XID':
            jar_path = self.common.filePath(name=way,suffix='.jar',file_path=secret)
            if not jar_path:
                return messagebox.showerror('错误', '当前路径未找到{}的Jar包！'.format(way))
        else:
            jar_path = ''
        txt = self.ent.dealOriginJson(txt, hash_way=new_way)
        if hash_way:
            out = keyway.encrypt(txt,secretKey=secret,code=way.lower(),hashFunction=hash_way)
            self.output.insert(END, "%s"%out)       
        else:
            if os.path.exists(txt) and os.path.isfile(txt):
                txt_name = os.path.basename(txt)
                csv = "%s%s.csv"%(new_way, txt_name.split(".")[0])
                if os.path.exists(csv):
                    os.remove(csv)  
                if way == "MD5":
                    result = keyway.encryptMd5File(txt,buffer = 100*1024*1024)
                    size, unit = 0,''
                    if not isinstance(result,str):
                        size, unit = self.common.getSize(result[1])                    
                    out = "文件: %s\n大小: %s%s\nMd5: %s"%(result[2],size,unit,result[0])
                    self.output.insert(END, "%s"%out)
                elif way == "BASE64":
                    MutilProcess.mutilThread(self.common.imageToBase64,txt)
                    out = MutilProcess.results[0]
                    if not out:
                        out = keyway.encrypt(txt,secretKey=secret,code=way.lower(),hashFunction=hash_way)
                    self.output.insert(END, "%s"%out)                    
                else:
                    key = '1' if way == 'XID' else ''
                    MutilProcess.mutilThread(self.batchEncrypt,keyway,key,way,txt,csv,hash_way,secret,jar_path)
                    self.output.insert(END, "%s批量加密完成..结果: %s\n"%(new_way, MutilProcess.results[0]))
            else:
                if way == 'XID':
                    out = self.strCipherByJar(plaintext=txt,key='1',jar=way,jar_path=jar_path,cipher='Encrypt')             
                else:
                    out = keyway.encrypt(txt,secretKey=secret,code=way.lower(),hashFunction=hash_way) 
                self.output.insert(END, "%s"%out)        
    
    @myLog('test_tools')
    def strCipherByJar(self,plaintext,key,jar,jar_path,cipher='Encrypt'):
        if plaintext:
            try:
                output = self.common.jarService(plaintext,key,jar,jar_path,crypt=cipher)
            except:
                output = "不正确的加密字符" 
        else:
            if cipher == 'Encrypt':
                output = "空字符无法加密"
            else:
                output = '空字符无法解密'
        return output    
    
    @myLog('test_tools')
    def batchEncrypt(self, keyway, key, way, path, csv, hash_way, secret_key, jar_path):
        try:
            result = self.batchFile(keyway,key,way,path,csv,hash_way,secret_key,jar_path)
        except Exception as e:
            return "%s"%e
        else:
            return os.path.join(os.getcwd(),csv)
    
    @myLog('test_tools')
    def batchFile(self, keyway, key, way, path, csv, hash_way, secret_key, jar_path):
        data=[]
        # 3des不能用循环加密,会出错
        with open(path,"r",encoding="utf-8") as fr:
            for i in fr.readlines():
                j = i.strip()
                if j:
                    data.append(j)
        if way == "3DES":
            fw = open(csv,'a+',encoding = 'utf-8')        
            self.recursive(data,way,fw,keyway)
            fw.close()
        elif way == "XID":
            self.writeJarFile(csv, data,keyway,hash_way,secret_key,key='1',jar=way,jar_path=jar_path)         
        else:
            self.writeJarFile(csv, data,keyway,hash_way,secret_key,key='',jar=way,jar_path=jar_path)             
    
    @myLog('test_tools')
    def writeJarFile(self, csv, data, keyway, hash_way, secret_key, key, jar,jar_path):
        way = jar.upper()    
        with open(csv,'a+',encoding = 'utf-8') as fw:
            for _data in data:
                if way == 'XID':#if way in ['XID','SM4']:
                    m = self.strCipherByJar(plaintext=_data,key=key,jar=way,jar_path=jar_path)
                else:
                    m = keyway.encrypt(_data,secretKey=secret_key,code=way.lower(),hashFunction=hash_way)
                fw.write(m)
                fw.write('\n')          
    
    @myLog('test_tools')
    def recursive(self,s,way,f,keyway):
        # 递归默认1000，3des加密只能递归，循环加密出错
        # sys.setrecursionlimit(1000000)  #递归深度
        if s:          
            m= keyway.encrypt(s[0],secretKey='',code=way.lower())
            f.write(m)
            f.write('\n')            
            del s[0]
            return self.recursive(s,way,f)
    
    @myLog('test_tools')
    def mainDecrypt(self):
        keyway = KeyApi()
        way = self.cmb1.get()
        txt = self.input.get()
        hash_way = self.cmb2.get()
        secret = self.secret_key.get()
        self.output.delete(0.0, END)
        if secret.strip():
            secret = secret.strip()
            certificatePath = secret.strip()
            myKeystorePath = secret.strip() 
        else:
            secret = self.secretKey
            certificatePath = self.certificatePath
            myKeystorePath = self.myKeystorePath        
        if txt:
            sign = ''
            if way in self.hash_code and hash_way=="RSA":
                secret = self.getSecret(keyway, certificatePath, crypt='Encrypt')            
                if secret == False:
                    return messagebox.showerror('验签失败', 'RSA密钥错误！')
                if ',' in txt:
                    txt, sign = txt.strip().rsplit(',',1)[0],txt.strip().rsplit(',',1)[1]
                if not txt or not sign:
                    return messagebox.showerror('验签失败', '请用逗号分隔原字符和签名字符！')
                p_out = '签名方式：' + way.upper() + 'with' + hash_way.upper()                    
            if way == 'RSA' and hash_way=='':
                secret = self.getSecret(keyway, myKeystorePath, crypt='Decrypt')
                if secret == False:
                    return messagebox.showerror('解密失败', 'RSA密钥错误！')
            if way == 'BASE64' and ',' in txt:
                img_path = self.common.base64ToImage(txt,name='tmp.png')
                result = '图片已生成：{}'.format(img_path)
            elif way == 'RSA' and hash_way=='RSA':
                result = keyway.getCertInfo(txt)
            else:
                result = keyway.decrypt(txt.strip(),secretKey=secret,code=way.lower(),hashFunction=hash_way,signature=sign)
            if result == True:
                out = p_out+'\n原文：{0}\n签名：{1}\n结果：验签通过'.format(txt,sign)
            elif result == False:
                out = p_out+'\n原文：{0}\n签名：{1}\n结果：验签失败'.format(txt,sign)                
            elif "Traceback (most recent call last)" in str(result):
                out = '不正确的加密字符'
            else:
                out = result                
        else:
            out = '空字符无法解密'
        self.output.insert(END, "{}".format(str(out)))
    
    @myLog('test_tools')
    def getSecret(self, keyway, path, crypt='Encrypt'):
        if crypt=='Encrypt':
            if path.endswith('.cer') and os.path.isfile(path):
                secret = keyway.getPublicKey(path)[0]
            else:
                path = self.common.filePath(name='',suffix='.cer',file_path=path)
                if path:
                    secret = keyway.getPublicKey(path)[0]
                else:
                    secret = False
        else:
            if path.endswith('.pfx') and os.path.isfile(path):
                secret = keyway.getPrivateKey(path,self.myKeystorePwd)[0]
            else:
                path = self.common.filePath(name='',suffix='.pfx',file_path=path)
                if path:
                    secret = keyway.getPrivateKey(path,self.myKeystorePwd)[0]
                else:
                    secret = False
        return secret            

    @myLog('test_tools')
    def openReadMe(self):
        try:
            os.startfile(os.path.abspath('.')+r'\README.txt')
        except Exception as e:
            messagebox.showerror('错误',e)              
    
    def startapp(self, app, local_app):
        local_app.destroy() 
        #self.master.withdraw()
        eval(app)(self.master)
        if self.common.imgPath:
            os.remove(self.common.imgPath)
                  
class UpdateTool():
    def __init__(self):
        self.download = (0,0)
    
    @myLog('test_tools')    
    def update(self):
        #cd /home & python3 -m http.server 20000
        #request.urlretrieve(url.strip(),filename,reporthook=self.reporthook) 远端数据下载到本地
        downsize=0
        blocksize=1024*5
        url="https://img173.gda086.com/img2019/10/23/9/2019102398173204.jpg"#"http://172.31.3.110/tools/tools.exe"
        filename = os.path.join(os.getcwd(),url.split("/")[-1])
        #url=urllib.parse.quote(url.strip())
        try:
            fs = request.urlopen(url)
            totalsize = 10*1000*1000
            if 'Content-Length' in fs.headers:
                totalsize = int(fs.headers['Content-Length'])
            with open(filename, "wb") as fw:
                while True:
                    data = fs.read(blocksize) 
                    fw.write(data)
                    fw.flush()
                    downsize += blocksize
                    if not data:
                        break    
                    self.download = Common().reporthook(downsize, totalsize, blocksize)                   
            fs.close()                    
        except Exception as e:
            self.download = 3,"下载失败！\n%s"%e
        return self.download
    
    @myLog('test_tools')    
    def upgrade(self):
        #messagebox.askquestion('提示', '要执行此操作吗') yes/no
        #messagebox.askyesnocancel('提示', '要执行此操作吗')
        #messagebox.askokcancel('提示', '要执行此操作吗')    
        result = self.download
        filename = os.path.join(os.getcwd(),'tools.exe')
        if result[0]==0:
            ret = messagebox.askyesno('提示', '是否版本更新？')
            if ret:
                if os.path.exists(filename):
                    messagebox.showinfo('提示','已更新\n%s'%(filename))
                else:
                    MutilProcess.mutilThread(proc=self.update)
        elif result[0]==1:
            messagebox.showinfo('提示',result[1])
        elif result[0]==2:
            messagebox.showwarning('警告',result[1])
        elif result[0]==3:
            ret = messagebox.showerror('错误',result[1])
            if ret:
                ret1 = messagebox.askretrycancel('提示', '是否重试更新')
                if ret1:
                    MutilProcess.mutilThread(proc=self.update)
        else:
            MutilProcess.mutilThread(proc=self.update)        

    def info(self):
        text = """author: liuwei\n
                  说明：MD5,SM3,SHA256不支持解密\n"""
        return  text

@myLog('test_tools')
class Application2():
    def __init__(self, master):
        #super().__init__(master)
        self.master = master
        self.common = Common()        
        self.app2 = Frame(self.master)
        self.app2.pack()    
        self.create_widgets()

    def create_widgets(self):
        menu = Menu(self.master)
        self.file_menu = Menu(menu, tearoff=False)
        menu.add_cascade(label='帮助(H)', menu=self.file_menu)
        menu.add_command(label="1-加密解密", command=lambda: self.startapp('Application', self.app2))
        menu.add_command(label="2-实时加密")
        menu.add_command(label="3-测试数据", command=lambda: self.startapp('Application3', self.app2))
        menu.add_command(label="4-格式数据", command=lambda: self.startapp('Application4', self.app2))
        menu.add_command(label="5-二维码", command=lambda: self.startapp('Application5', self.app2))
        menu.add_command(label="6-身份证", command=lambda: self.startapp('Application6', self.app2))  
        menu.add_command(label="7-HTTP请求", command=lambda: self.startapp('Application7', self.app2))   
        self.file_menu1 = Menu(self.file_menu, tearoff=False)
        self.file_menu.add_cascade(label="关于工具", menu = self.file_menu1)
        self.file_menu.add_command(label="版本更新", command = UpdateTool().upgrade)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="退出", command=root.quit)  
        self.text = filter(None, UpdateTool().info().split("\n"))
        for text in self.text:
            self.file_menu1.add_command(label=text.strip()) 
        self.master.config(menu=menu)
        self.data = StringVar()
        label1 = Label(self.app2, text="输入数据", font=("宋体", 10))
        label1.grid(row=0, column=0, padx=10, pady=10)
        label2 = Label(self.app2, text="输出数据", font=("宋体", 10))
        label2.grid(row=2, column=0, padx=10, pady=10)
        #for str_name in ["SM4", "3DES", "MD5", "SM3", "UnionSM3", "SHA256", "BASE64", "大写", "小写", "Unix时间戳", "Unicode中文互转"]:
        Label(self.app2, text="SM4", font=("宋体", 10)).grid(row=3, column=0, padx=10, pady=10)
        Label(self.app2, text="MD5", font=("宋体", 10)).grid(row=4, column=0, padx=10, pady=10)
        Label(self.app2, text="SM3", font=("宋体", 10)).grid(row=5, column=0, padx=10, pady=10)
        Label(self.app2, text="UnionSM3", font=("宋体", 10)).grid(row=6, column=0, padx=10, pady=10)
        Label(self.app2, text="SHA256", font=("宋体", 10)).grid(row=7, column=0, padx=10, pady=10)
        Label(self.app2, text="BASE64", font=("宋体", 10)).grid(row=8, column=0, padx=10, pady=10)
        Label(self.app2, text="大写", font=("宋体", 10)).grid(row=9, column=0, padx=10, pady=10)
        Label(self.app2, text="小写", font=("宋体", 10)).grid(row=10, column=0, padx=10, pady=10)
        Label(self.app2, text="Unix时间戳", font=("宋体", 10)).grid(row=11, column=0, padx=10, pady=10)
        Label(self.app2, text="Unicode中文互转", font=("宋体", 10)).grid(row=12, column=0, padx=10, pady=10)
        # setattr(self, 'output{}'.format(index), Text(self.app2, width=65, height=1))
        # exec(f'"output{}".format(index) = Text(self.app2, width=65, height=1)')
        # locals()["output{}".format(index)] = Text(self.app2, width=65, height=1)
        self.output0 = Text(self.app2, width=80, height=1)
        self.output0.grid(row=3, column=1, padx=1, pady=10)
        self.output1 = Text(self.app2, width=80, height=1)
        self.output1.grid(row=4, column=1, padx=1, pady=10)
        self.output2 = Text(self.app2, width=80, height=1)
        self.output2.grid(row=5, column=1, padx=1, pady=10)
        self.output3 = Text(self.app2, width=80, height=1)
        self.output3.grid(row=6, column=1, padx=1, pady=10)
        self.output4 = Text(self.app2, width=80, height=1)
        self.output4.grid(row=7, column=1, padx=1, pady=10)
        self.output5 = Text(self.app2, width=80, height=1)
        self.output5.grid(row=8, column=1, padx=1, pady=10)
        self.output6 = Text(self.app2, width=80, height=1)
        self.output6.grid(row=9, column=1, padx=1, pady=10)
        self.output7 = Text(self.app2, width=80, height=1)
        self.output7.grid(row=10, column=1, padx=1, pady=10)     
        self.output8 = Text(self.app2, width=80, height=1)
        self.output8.grid(row=11, column=1, padx=1, pady=10)  
        self.output9 = Text(self.app2, width=80, height=1)
        self.output9.grid(row=12, column=1, padx=1, pady=10)     
        self.data.trace("w", lambda name, index, mode: self.mainEncrypt())
        self.input = Entry(self.app2, textvariable=self.data, width=95)
        self.input.grid(row=1, column=0, columnspan=2, padx=5, pady=1)
        self.input.focus_set()
        self.master.bind("<Button-3>", self.showMenu)

    def showMenu(self,event):
        self.file_menu1.post(event.x_root, event.y_root)
    
    @myLog('test_tools')    
    def mainEncrypt(self):
        keyway = KeyApi()
        txt = self.input.get()
        for index, value in enumerate(('SM4', 'MD5', 'SM3', 'UnionSM3', 'SHA256','BASE64','upper','lower','unix','unicode')):
            if value not in ('upper','lower','unix','unicode'):
                out = keyway.encrypt(txt,secretKey='',code=value.lower())
            elif value == 'unix':
                if ':' in txt or '-' in txt or '年' in txt:
                    out = dc.getUnixTime(txt, mod='data2time') 
                else:
                    out = dc.getUnixTime(txt, mod='time2data') 
            elif value == 'unicode':
                out = dc.getUnicode(txt)
            if index == 0:         
                self.output0.delete(0.0, END)
                self.output0.insert(END, "%s"%out)                                
            if index == 1:         
                self.output1.delete(0.0, END)
                self.output1.insert(END, "%s"%out) 
            if index == 2:         
                self.output2.delete(0.0, END)
                self.output2.insert(END, "%s"%out) 
            if index == 3:         
                self.output3.delete(0.0, END)
                self.output3.insert(END, "%s"%out) 
            if index == 4:
                self.output4.delete(0.0, END)
                self.output4.insert(END, "%s"%out)
            if index == 5:      
                self.output5.delete(0.0, END)
                self.output5.insert(END, "%s"%out)                 
            if index == 6:         
                self.output6.delete(0.0, END)
                self.output6.insert(END, "%s"%txt.upper()) 
            if index == 7:         
                self.output7.delete(0.0, END)
                self.output7.insert(END, "%s"%txt.lower())
            if index == 8:         
                self.output8.delete(0.0, END)
                self.output8.insert(END, "%s"%out)  
            if index == 9:         
                self.output9.delete(0.0, END)
                self.output9.insert(END, "%s"%out)

    def startapp(self, app, local_app):
        local_app.destroy() 
        #self.master.withdraw()
        eval(app)(self.master) 
        if self.common.htmlPath:
            os.remove(self.common.htmlPath)

@myLog('test_tools')
class Application3():
    def __init__(self, master):
        #super().__init__(master)
        self.master = master
        self.common = Common()        
        self.app3 = Frame(self.master)
        self.app3.pack()    
        self.create_widgets()

    def create_widgets(self):
        menu = Menu(self.master)
        self.file_menu = Menu(menu, tearoff=False)
        menu.add_cascade(label='帮助(H)', menu=self.file_menu)
        menu.add_command(label="1-加密解密", command=lambda: self.startapp('Application', self.app3))
        menu.add_command(label="2-实时加密", command=lambda: self.startapp('Application2', self.app3))
        menu.add_command(label="3-测试数据")
        menu.add_command(label="4-格式数据", command=lambda: self.startapp('Application4', self.app3))     
        menu.add_command(label="5-二维码", command=lambda: self.startapp('Application5', self.app3))      
        menu.add_command(label="6-身份证", command=lambda: self.startapp('Application6', self.app3))
        menu.add_command(label="7-HTTP请求", command=lambda: self.startapp('Application7', self.app3))
        self.file_menu1 = Menu(self.file_menu, tearoff=False)
        self.file_menu2 = Menu(self.file_menu, tearoff=False)
        self.file_menu2.add_command(label="关于...", command=self.common.visitWeb)        
        self.file_menu.add_cascade(label="关于工具", menu = self.file_menu1)
        self.file_menu.add_command(label="版本更新", command = UpdateTool().upgrade)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="退出", command=root.quit)  
        self.text = filter(None, UpdateTool().info().split("\n"))
        for text in self.text:
            self.file_menu1.add_command(label=text.strip())
        self.master.config(menu=menu)
        self.master.bind("<Button-3>", self.showMenu)        
        label1 = Label(self.app3, text="数据类型", font=("宋体", 10))
        label1.grid(row=0, column=0, padx=10, pady=10, sticky='W')
        label2 = Label(self.app3, text="数据展示", font=("宋体", 10))
        label2.grid(row=2, column=0, padx=10, pady=10, sticky='W')
        button1 = Button(self.app3, text="生成", command=self.showData)
        button1.grid(row=1, column=2, padx=10, pady=10, sticky='W')        
        button2 = Button(self.app3, text="重置", command=self.clear)
        button2.grid(row=1, column=3, padx=10, pady=10)
        self.output = scrolledtext.ScrolledText(self.app3, width=90, height=27, font=("宋体", 10), background='#ffffff')
        self.output.grid(row=3, column=0, columnspan=4, padx=5, pady=1)
        self.cmb = Combobox(self.app3, width=17, state="readonly")
        self.cmb['value'] = ('00-全部','01-姓名','02-手机号','03-流水号','04-随机数','05-身份证号','06-邮箱地址','07-居住地址','08-借记卡号','09-贷记卡号','10-统一社会信用代码')
        self.cmb.grid(row=1, column=0, padx=10, pady=10, sticky='W')
        self.cmb.current(0) #默认00
        spin_deflaut = IntVar()
        spin_deflaut.set(10) # 设置默认值10
        self.spin = Spinbox(self.app3, width=10, from_=1, to=100, increment=1, textvariable=spin_deflaut) #展示个数
        self.spin.grid(row=1, column=1, padx=5, pady=10, sticky='W')

    def showMenu(self,event):
        self.file_menu2.post(event.x_root, event.y_root)
        
    def clear(self):
        self.cmb.current(0)
        self.spin.delete(0, END) # delete(startindex [,endindex])
        self.spin.insert(0, 10)   # insert(index [,string]...)
        self.output.delete(0.0, END)
        return self.output 
    
    @myLog('test_tools')
    def showData(self):
        input_data = self.cmb.get()
        count = self.spin.get()
        in_num = input_data.split('-')[0]
        try:
            count = int(count)
        except:
            count = 10
        else:
            if count > 100:
                count = 100        
        self.output.delete(0.0, END)
        if in_num == '01':
            out = self.common.queryData(dc.getName, count) #dc.getName()使用带()的，循环结果一样
        elif in_num == '02':
            out = self.common.queryData(dc.getPhoneNumber, count)
        elif in_num == '03':
            out = self.common.queryData(dc.getTxSN, count)
        elif in_num == '04':
            out = self.common.queryData(dc.getRandom, count, 20)
        elif in_num == '05':
            out = self.common.queryData(dc.getID, count)
        elif in_num == '06':
            out = self.common.queryData(dc.getEmail, count)
        elif in_num == '07':
            out = self.common.queryData(dc.getAddress, count)
        elif in_num == '08':
            out = self.common.queryData(dc.getBankCard, count, '102', 1)
        elif in_num == '09':
            out = self.common.queryData(dc.getBankCard, count, '102', 2)
        elif in_num == '10':
            out = self.common.queryData(dc.getUscc, count)
        else:
            idno = dc.getID()
            sex = 0 if int(idno[-2]) % 2 == 0 else 1
            name = dc.getName(sex)
            tel = dc.getPhoneNumber()
            txsn27 = dc.getTxSN()
            random20 = dc.getRandom(20)
            email = dc.getEmail()
            address = dc.getAddress()
            debit102 = dc.getBankCard(bankID='102',cardType=1)
            credit102 = dc.getBankCard(bankID='102',cardType=2)
            ogCode = dc.getOrganizingCode()
            uscc = dc.getUscc()
            uuid = dc.getUuid('DX')
            out = f"姓名：{name}\n手机号：{tel}\n流水号：{txsn27}\n随机数：{random20}\n身份证号：{idno}\n邮箱地址：{email}\n居住地址：{address}\n借记卡号：{debit102}\n贷记卡号：{credit102}\n组织机构代码：{ogCode}\n统一社会信用代码：{uscc}\nUUID：{uuid}\n"
        self.output.insert(END, out)

    def startapp(self, app, local_app):
        local_app.destroy() 
        #self.master.withdraw()
        eval(app)(self.master)

@myLog('test_tools')
class Application4():
    def __init__(self, master):
        #super().__init__(master)
        self.master = master
        self.common = Common()        
        self.app4 = Frame(self.master)
        self.app4.pack()   
        self.create_widgets()

    def create_widgets(self):
        menu = Menu(self.master)
        self.file_menu = Menu(menu, tearoff=False)
        menu.add_cascade(label='帮助(H)', menu=self.file_menu)
        menu.add_command(label="1-加密解密", command=lambda: self.startapp('Application', self.app4))
        menu.add_command(label="2-实时加密", command=lambda: self.startapp('Application2', self.app4))
        menu.add_command(label="3-测试数据", command=lambda: self.startapp('Application3', self.app4))
        menu.add_command(label="4-格式数据")        
        menu.add_command(label="5-二维码", command=lambda: self.startapp('Application5', self.app4))
        menu.add_command(label="6-身份证", command=lambda: self.startapp('Application6', self.app4))
        menu.add_command(label="7-HTTP请求", command=lambda: self.startapp('Application7', self.app4))
        self.file_menu1 = Menu(self.file_menu, tearoff=False)
        self.file_menu2 = Menu(self.file_menu, tearoff=False)
        self.file_menu.add_cascade(label="关于工具", menu = self.file_menu1)
        self.file_menu.add_command(label="版本更新", command = UpdateTool().upgrade)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="退出", command = root.quit)
        self.file_menu2.add_command(label="剪切", command=lambda : self.keyMap(kevent="cut"))
        self.file_menu2.add_command(label="复制", command=lambda : self.keyMap(kevent="copy"))
        self.file_menu2.add_command(label="粘贴", command=lambda : self.keyMap(kevent="paste"))           
        self.text = filter(None, UpdateTool().info().split("\n"))
        for text in self.text:
            self.file_menu1.add_command(label=text.strip()) 
        self.master.config(menu=menu)
        Label(self.app4, text="待处理数据", font=("宋体", 10)).grid(row=0, column=2, padx=10, pady=10)
        Label(self.app4, text="处理后数据", font=("宋体", 10)).grid(row=0, column=3, padx=10, pady=10)
        self.pre_txt = scrolledtext.ScrolledText(self.app4, width=38, height=34, font=("宋体", 10), background='#ffffff')
        self.pre_txt.grid(row=1, column=2, rowspan=6, padx=5, pady=1)
        self.post_txt = scrolledtext.ScrolledText(self.app4, width=38, height=34, font=("宋体", 10), background='#ffffff')
        self.post_txt.grid(row=1, column=3, rowspan=6, padx=5, pady=1)
        Button(self.app4, text="格式化XML", command=lambda :self.formatData("xml")).grid(row=1, column=1, padx=5, pady=5, sticky='W')
        Button(self.app4, text="格式化SQL", command=lambda :self.formatData("sql")).grid(row=2, column=1, padx=5, pady=5, sticky='W')
        Button(self.app4, text="格式化JSON", command=lambda :self.formatData("json")).grid(row=3, column=1, padx=5, pady=5, sticky='W')
        Button(self.app4, text="JSON转字符串", command=lambda :self.formatData("JsonToStr")).grid(row=4, column=1, padx=5, pady=5, sticky='W')
        Button(self.app4, text="JSON转YAML", command=lambda :self.formatData("JsonToYaml")).grid(row=5, column=1, padx=5, pady=5, sticky='W')
        Button(self.app4, text="清空", command=self.clear).grid(row=6, column=1, padx=5, pady=5, sticky='W')
        self.master.bind("<Button-3>", self.showMenu)

    def showMenu(self,event):
        self.file_menu2.post(event.x_root, event.y_root)

    def keyMap(self,kevent=None):
        if kevent == 'cut':
            self.pre_txt.event_generate("<<Cut>>")
            self.post_txt.event_generate("<<Cut>>")
        elif kevent == 'copy':
            self.pre_txt.event_generate("<<Copy>>")
            self.post_txt.event_generate("<<Copy>>")
        elif kevent == 'paste':
            self.pre_txt.event_generate("<<Paste>>")

    def clear(self):
        self.pre_txt.delete(0.0, END)
        self.post_txt.delete(0.0, END)
        
    @myLog('test_tools')    
    def formatData(self, dataType):
        self.post_txt.delete(0.0, END)
        input_str = self.pre_txt.get(1.0, 'end')
        if not input_str.strip():
            return messagebox.showerror('错误','待处理数据不能为空！')
        if dataType == "xml":
            result = dc.formatXML(input_str)
        elif dataType == "sql":
            result = dc.formatSql(input_str)
        elif dataType == "json":
            result = dc.formatJson(input_str,0,sort=True)
        elif dataType == "JsonToStr":
            result = dc.formatJson(input_str,1)          
        else:
            result = "敬请期待……"
        self.post_txt.insert(END, "{}".format(result))

    def startapp(self, app, local_app):
        local_app.destroy() 
        #self.master.withdraw()
        eval(app)(self.master)

@myLog('test_tools')
class Application5():
    def __init__(self, master):
        #super().__init__(master)
        self.master = master
        self.common = Common()        
        self.app5 = Frame(self.master)
        self.app5.pack()    
        self.create_widgets()
        self.img_open = ''
        self.img_show = ''

    def create_widgets(self):
        menu = Menu(self.master)
        self.file_menu = Menu(menu, tearoff=False)
        menu.add_cascade(label='帮助(H)', menu=self.file_menu)
        menu.add_command(label="1-加密解密", command=lambda: self.startapp('Application', self.app5))    
        menu.add_command(label="2-实时加密", command=lambda: self.startapp('Application2', self.app5))
        menu.add_command(label="3-测试数据", command=lambda: self.startapp('Application3', self.app5))
        menu.add_command(label="4-格式数据", command=lambda: self.startapp('Application4', self.app5))
        menu.add_command(label="5-二维码")
        menu.add_command(label="6-身份证", command=lambda: self.startapp('Application6', self.app5))
        menu.add_command(label="7-HTTP请求", command=lambda: self.startapp('Application7', self.app5))     
        self.file_menu1 = Menu(self.file_menu, tearoff=False)
        self.file_menu2 = Menu(self.file_menu, tearoff=False)
        self.file_menu2.add_command(label="下载PNG", command=lambda:self.saveImg('.png'))
        self.file_menu2.add_command(label="下载ICO", command=lambda:self.saveImg('.ico'))
        self.file_menu.add_cascade(label="关于工具", menu = self.file_menu1)
        self.file_menu.add_command(label="版本更新", command = UpdateTool().upgrade)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="退出", command=root.quit)  
        self.text = filter(None, UpdateTool().info().split("\n"))
        for text in self.text:
            self.file_menu1.add_command(label=text.strip()) 
        self.master.config(menu=menu)
        Label(self.app5, text="二维码", font=("宋体", 10)).grid(row=0, column=0, columnspan=3, padx=1, pady=10, sticky='W')
        Label(self.app5, text="操作", font=("宋体", 10)).grid(row=6, column=0, padx=10, pady=5)
        Button(self.app5, text="二维码生成", command=lambda:self.makeQRcode('QR')).grid(row=6, column=1, padx=1, pady=5)
        Button(self.app5, text="ICO", command=lambda:self.makeQRcode('ICO')).grid(row=6, column=2, padx=1, pady=5)   
        #Label(self.app5, image = '').grid(row=7, column=0, columnspan=2, padx=10, pady=1)      
        Label(self.app5, text="内容", font=("宋体", 10)).grid(row=1, column=0, padx=1, pady=5)
        Label(self.app5, text="纠错", font=("宋体", 10)).grid(row=2, column=0, padx=1, pady=5)
        Label(self.app5, text="尺寸", font=("宋体", 10)).grid(row=3, column=0, padx=1, pady=5)
        Label(self.app5, text="边距", font=("宋体", 10)).grid(row=4, column=0, padx=1, pady=5)
        Label(self.app5, text="LOGO", font=("宋体", 10)).grid(row=5, column=0, padx=1, pady=5)     
        self.input1 = Entry(self.app5, textvariable=StringVar(), width=73) #输入
        self.input1.grid(row=1, column=1, padx=1, pady=5)
        self.input3 = Entry(self.app5, textvariable=StringVar(value='1'), width=73)
        self.input3.grid(row=3, column=1, padx=1, pady=5)
        self.input1.focus_set()
        self.input5 = Entry(self.app5, textvariable=StringVar(), width=73)
        self.input5.insert(0, '选填')
        self.input5.grid(row=5, column=1, padx=1, pady=5)
        self.master.bind("<Button-3>", self.showMenu)
        self.cmb2 = Combobox(self.app5, value=('L 7%', 'M 15%', 'Q 25%', 'H 30%'), width=70, state="readonly")
        self.cmb2.grid(row=2, column=1, padx=1, pady=5)
        self.cmb2.current(0)
        self.cmb4 = Combobox(self.app5, width=70, state="readonly")
        self.cmb4['value'] = ('0', '1', '2', '3', '4')
        self.cmb4.grid(row=4, column=1, padx=1, pady=5)
        self.cmb4.current(4)
        Button(self.app5, text="...", command=lambda: self.choose(self.input1)).grid(row=1, column=2, padx=1, pady=5)
        Button(self.app5, text="...", command=lambda: self.choose(self.input5)).grid(row=5, column=2, padx=1, pady=5)   

    def showMenu(self,event):
        self.file_menu2.post(event.x_root, event.y_root)
    
    @myLog('test_tools')
    def choose(self, data):
        data.delete(0, END)
        filename = filedialog.askopenfilename(title='选择图片',
                                          filetypes=[('图片文件', '*.png'), ('图片文件', '*.jpg'), ('图片文件', '*.jpeg'), ('图片文件', '*.bmp'), 
                                                     ('图片文件', '*.gif'), ('图片文件', '*.ico'), ('所有文件', '*')])
        data.insert(INSERT,filename)
    
    @myLog('test_tools')
    def saveImg(self,_type):
        #filedialog.asksaveasfile() #选择以什么文件保存，创建文件并返回文件流对象
        #选择以什么文件名保存，返回文件名
        ftypes = [('图片文件', '*.png'), ('图片文件', '*.jpg'), ('图片文件', '*.jpeg'), ('图片文件', '*.bmp'), ('图片文件', '*.gif'), ('图片文件', '*.ico'), ('所有文件', '*')]
        filename = filedialog.asksaveasfilename(filetypes=ftypes,title='保存图片',defaultextension=_type)
        if filename:
            #return open(filename, 'w')
            if os.path.splitext(filename)[1] in ('.png','.jpg','.jpeg','.bmp','.gif','.ico'):
                try:
                    if _type=='.png':
                        self.img_open.save(filename)
                    else:
                        self.common.imageToFaviconIco(favicon,filename)   
                except:
                    return messagebox.showerror('错误','{}图片不存在'.format(filename))
                else:
                    return messagebox.showinfo('提示','{}图片已保存'.format(filename))
            else:
                return messagebox.showerror('错误','{}图片格式不正确'.format(filename))
    
    @myLog('test_tools')
    def makeQRcode(self,model='QR'):
        global favicon
        data = self.input1.get()
        version = self.input3.get().strip()
        border = self.cmb4.get()
        err_c = self.cmb2.get()
        logo_path = self.input5.get().strip()
        try:
            version = int(version) # 尺寸1-40间
        except:
            return messagebox.showerror('错误','尺寸输入错误')        
        else:
            if model=='QR':
                self.common.makeQRcode(data,err_c,version,border,logo_path,box_size=4)
                favicon = self.common.imgPath
                #只支持gif， 所以PNG图片需要使用Image.open
                #img_gif = Tkinter.PhotoImage(file = 'img_gif.gif')
                #label_img = Tkinter.Label(root, image = img_gif).pack()          
                #终端显示图片 #解决jpg报错，OSError: cannot write mode RGBA as JPEG
                self.img_open = pilImage.open(favicon)#.convert('RGB')
                self.img_show = pilImageTk.PhotoImage(self.img_open) #img_show需要定义为全局变量，否则不显示
                Label(self.app5, image = self.img_show).grid(row=7, column=1, padx=10, pady=10)
            else:
                version = 256 if version==1 else version
                favicon=self.common.imageToFaviconIco(src_path=data,dist_path='tmp.ico',default_size=version)
                if favicon:
                    img_open = pilImage.open(favicon)
                    self.img_show = pilImageTk.PhotoImage(img_open)
                    Label(self.app5, image = self.img_show).grid(row=7, column=1, padx=10, pady=10)
                else:
                    return messagebox.showerror('错误','内容或尺寸输入错误')

    def startapp(self, app, local_app):
        local_app.destroy() 
        #self.master.withdraw()
        eval(app)(self.master)
        if self.common.imgPath:
            os.remove(self.common.imgPath)

@myLog('test_tools')
class Application6():
    def __init__(self, master):
        #super().__init__(master)
        self.master = master
        self.common = Common()        
        self.app6_1 = Frame(self.master)
        self.app6_2 = Frame(self.master)
        self.app6_3 = Frame(self.master)
        self.app6_1.pack()
        self.app6_2.pack()  
        self.app6_3.pack()
        self.prov_city,self.city_county,self.idcards = dc.getIdentify()
        self.provs = {self.idcards[int(i)]:i for i in self.prov_city.keys()}
        self.create_widgets()

    def create_widgets(self):
        menu = Menu(self.master)
        self.file_menu = Menu(menu, tearoff=False)
        menu.add_cascade(label='帮助(H)', menu=self.file_menu)
        menu.add_command(label="1-加密解密", command=lambda: self.startapp('Application'))
        menu.add_command(label="2-实时加密", command=lambda: self.startapp('Application2'))
        menu.add_command(label="3-测试数据", command=lambda: self.startapp('Application3'))
        menu.add_command(label="4-格式数据", command=lambda: self.startapp('Application4'))
        menu.add_command(label="5-二维码", command=lambda: self.startapp('Application5'))    
        menu.add_command(label="6-身份证")
        menu.add_command(label="7-HTTP请求", command=lambda: self.startapp('Application7'))
        self.file_menu1 = Menu(self.file_menu, tearoff=False)
        self.file_menu2 = Menu(self.file_menu, tearoff=False)
        self.file_menu.add_cascade(label="关于工具", menu = self.file_menu1)
        self.file_menu.add_command(label="版本更新", command = UpdateTool().upgrade)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="退出", command=root.quit)
        self.text = filter(None, UpdateTool().info().split("\n"))
        for text in self.text:
            self.file_menu1.add_command(label=text.strip())        
        self.file_menu2.add_command(label="剪切", command=lambda : self.keyMap(kevent="cut"))
        self.file_menu2.add_command(label="复制", command=lambda : self.keyMap(kevent="copy"))
        self.file_menu2.add_command(label="粘贴", command=lambda : self.keyMap(kevent="paste"))        
        self.master.config(menu=menu)
        self.master.bind("<Button-3>", self.showMenu)        
        label1_1 = Label(self.app6_1, text="选择出生地：", font=("宋体", 10))
        label1_1.grid(row=0, column=0, padx=5, pady=5, sticky='W')
        label2_1 = Label(self.app6_1, text="省份：", font=("宋体", 10))
        label2_1.grid(row=1, column=0, padx=5, pady=10, sticky='W')
        label3_1 = Label(self.app6_1, text="城市：", font=("宋体", 10))
        label3_1.grid(row=1, column=2, padx=5, pady=10, sticky='W')
        label4_1 = Label(self.app6_1, text="县：", font=("宋体", 10))
        label4_1.grid(row=1, column=4, padx=5, pady=10, sticky='W') 
        self.cmb1_1 = Combobox(self.app6_1, width=18, state="readonly") # 省份 #省市联动
        self.cmb1_1['value'] = tuple(x for x in self.provs.keys()) 
        self.cmb1_1.current(0) #默认00
        self.cmb1_1.bind('<<ComboboxSelected>>', self.getData4City)  # 绑定选中事件
        self.cmb1_1.grid(row=1, column=1, padx=5, pady=10, sticky='W')
        self.cmb2_1 = Combobox(self.app6_1, width=18, state="readonly") # 市   
        self.cmb2_1['value'] = tuple(self.idcards[int(x)] for x in self.prov_city['110000'])
        self.cmb2_1.current(0) #默认北京市区
        self.cmb2_1.bind('<<ComboboxSelected>>', self.getData4County)  # 绑定选中事件        
        self.cmb2_1.grid(row=1, column=3, padx=5, pady=10, sticky='W')   
        self.cmb3_1 = Combobox(self.app6_1, width=18, state="readonly") # 县
        self.cmb3_1['value'] = tuple(self.idcards[int(x)] for x in self.city_county['110100']) 
        self.cmb3_1.current(0) #默认00 
        self.cmb3_1.grid(row=1, column=5, padx=5, pady=10, sticky='W')           
        label1_2 = Label(self.app6_2, text="出生年月：", font=("宋体", 10))
        label1_2.grid(row=0, column=0, padx=5, pady=5, sticky='W')
        label1_2 = Label(self.app6_2, text="选择性别：", font=("宋体", 10))
        label1_2.grid(row=0, column=6, padx=5, pady=5, sticky='W')        
        label2_2 = Label(self.app6_2, text="年", font=("宋体", 10))
        label2_2.grid(row=1, column=1, padx=5, pady=10, sticky='W')
        label3_2 = Label(self.app6_2, text="月", font=("宋体", 10))
        label3_2.grid(row=1, column=3, padx=5, pady=10, sticky='W')
        label4_2 = Label(self.app6_2, text="日", font=("宋体", 10))
        label4_2.grid(row=1, column=5, padx=5, pady=10, sticky='W') 
        self.y_v = StringVar()
        self.y_v.set(2000) # 设置默认值2000
        spin_2 = Spinbox(self.app6_2, width=17, from_=1900, to=2900, increment=1, textvariable=self.y_v, command=self.getMns) #年# 回调函数
        spin_2.grid(row=1, column=0, padx=5, pady=10, sticky='W')      #年月联动
        self.cmb2_2 = Combobox(self.app6_2, width=17, state="readonly")  #月 #月日联动
        self.cmb2_2['value'] = tuple('0'+str(x) if len(str(x))==1 else str(x) for x in range(1,13))
        self.cmb2_2.current(0) #默认01 下标0 
        self.cmb2_2.bind('<<ComboboxSelected>>', self.getDays)  # 绑定选中事件
        self.cmb2_2.grid(row=1, column=2, padx=5, pady=10, sticky='W')
        self.cmb3_2 = Combobox(self.app6_2, width=17, state="readonly")  #日 
        self.cmb3_2['value'] = tuple('0'+str(x) if len(str(x))==1 else str(x) for x in range(1,32)) 
        self.cmb3_2.current(0) #默认00
        self.cmb3_2.grid(row=1, column=4, padx=5, pady=10, sticky='W')
        self.vint = IntVar()     
        sex1_2 = Radiobutton(self.app6_2, text='男', variable=self.vint, value=1)
        sex1_2.grid(row=1, column=6, padx=5, pady=10, sticky='W')
        sex2_2 = Radiobutton(self.app6_2, text='女', variable=self.vint, value=0)
        sex2_2.grid(row=1, column=7, padx=5, pady=10, sticky='W')
        button1_3 = Button(self.app6_3, text="获取身份证号码", command=lambda: self.getIDCard(method='in'))
        button1_3.grid(row=0, column=0, padx=5, pady=5, sticky='W')
        label1_3 = Label(self.app6_3, text="结果：", font=("宋体", 10))
        label1_3.grid(row=1, column=0, padx=5, pady=5, sticky='W')        
        label2_3 = Label(self.app6_3, text="验证身份证号码：", font=("宋体", 10))
        label2_3.grid(row=0, column=1, padx=5, pady=5, sticky='W')
        self.entry1_3 = Entry(self.app6_3, textvariable=StringVar(), width=35)
        self.entry1_3.grid(row=1, column=1, padx=5, pady=1)
        button2_3 = Button(self.app6_3, text="解析", command=lambda: self.getIDCard(method='out'))
        button2_3.grid(row=1, column=2, padx=5, pady=5, sticky='W')
        self.text1_3 = scrolledtext.ScrolledText(self.app6_3, width=43, height=19, font=("宋体", 10), background='#ffffff')
        self.text1_3.grid(row=2, column=0, padx=5, pady=1) 
        self.text2_3 = scrolledtext.ScrolledText(self.app6_3, width=43, height=19, font=("宋体", 10), background='#ffffff')
        self.text2_3.grid(row=2, column=1, columnspan=2, padx=5, pady=1)                

    def showMenu(self,event):
        self.file_menu2.post(event.x_root, event.y_root)
 
    def keyMap(self,kevent=None):
        if kevent == 'cut':
            self.entry1_3.event_generate("<<Cut>>")
            self.text1_3.event_generate("<<Cut>>")
            self.text2_3.event_generate("<<Cut>>")
        elif kevent == 'copy':
            self.entry1_3.event_generate("<<Copy>>")
            self.text1_3.event_generate("<<Copy>>")
            self.text2_3.event_generate("<<Copy>>")
        elif kevent == 'paste':
            self.entry1_3.event_generate("<<Paste>>")
    
    @myLog('test_tools')
    def getMonth(self,var,year=1):
        return dc.getDays(var,year)
    
    @myLog('test_tools')
    def getMns(self,*args):
        #self.cmb2_2.current(0)
        self.getDays()
     
    @myLog('test_tools')
    def getDays(self,*args):
        year = self.y_v.get() #年
        cmb2_2_var = self.cmb2_2.get() #月
        day_var = self.cmb3_2.get() #日
        try:
            int(year)
        except:
            year = '2000'
        else:
            if len(year)!=4:
                year = '2000'    
        monthday = self.getMonth(int(cmb2_2_var),int(year))
        self.cmb3_2['value'] = tuple('0'+str(x) if len(str(x))==1 else str(x) for x in range(1,monthday+1))
        if int(day_var) > monthday:
            self.cmb3_2.current(0) #需要设置新默认值，否则显示31日时，切到2月还是31
    
    @myLog('test_tools')
    def getData4City(self,*args):
        value = self.provs[self.cmb1_1.get()]
        result = tuple([self.idcards[int(k)] for k in self.prov_city[value]])
        self.cmb2_1['value'] = result if result else ('市辖区')
        self.cmb2_1.current(0) #相对widget方法中，重新设置新默认值
        self.getData4County()
    
    @myLog('test_tools')
    def getData4County(self,*args):
        # 无法反转self.idcards，values值有些是重复的
        result = ''
        k1 = self.provs[self.cmb1_1.get()] #420000
        for v in self.prov_city[k1]:
            if v and (self.cmb2_1.get() == self.idcards[int(v)]):
                k2 = v
                result = tuple([self.idcards[int(k)] for k in self.city_county[k2]])
                break
        self.cmb3_1['value'] = result if result else ('市辖区')
        self.cmb3_1.current(0)
    
    @myLog('test_tools')    
    def getIDCard(self, method='in'):
        if method == 'in':
            self.text1_3.delete(0.0, END)
            v_code_1 = self.provs[self.cmb1_1.get()]
            v_code_2 = ''
            for v_code in self.prov_city[v_code_1]:
                if v_code and (self.cmb2_1.get() == self.idcards[int(v_code)]):
                    v_code_2 = v_code
                    break
            if v_code_2:
                v_code_3 = ''
                for v_code in self.city_county[v_code_2]:
                    if v_code and (self.cmb3_1.get() == self.idcards[int(v_code)]):
                        v_code_3 = v_code
                        break 
                if v_code_3:
                    citycode = v_code_3
                else:
                    citycode = v_code_2
            else:
                citycode = v_code_1
            year = self.y_v.get()
            try:
                int(year)
            except:
                return messagebox.showerror('错误','年份必须为4位数字！')
            else:
                if len(year)!=4:
                    return messagebox.showerror('错误','年份必须为4位数字！')             
            birthday = year + self.cmb2_2.get() + self.cmb3_2.get()
            sex = self.vint.get()
            ID = dc.getID(citycode,birthday,sex)
            self.text1_3.insert(END, "{}".format("\n".join(ID)))
        else:
            self.text2_3.delete(0.0, END)
            ID = self.entry1_3.get().strip()
            if not ID or len(ID) != 18:
                messagebox.showerror('错误','身份证号码必须为18位！')
            else:
                try:
                    prov = int(ID[:2]+'0000')
                    city = int(ID[:4]+'00')
                    county = int(ID[:6])
                except:
                    messagebox.showerror('错误','身份证号码必须为数字！')
                else:
                    if prov in self.idcards:
                        if city in self.idcards:
                            if county in self.idcards:
                                out = "出生地址：{}\n".format(self.idcards[prov] + self.idcards[city] + self.idcards[county])
                                try:
                                    year = int(ID[6:10])
                                    month = int(ID[10:12])
                                    day = int(ID[12:14])
                                except:
                                    messagebox.showerror('错误','身份证号码必须为数字！') 
                                else:
                                    birday = "出生日期：{0}年{1}月{2}日\n".format(year,month,day)
                                    if month > 12 or month < 1:
                                        out = "该身份证的出生日期错误！\n\n" + out + birday
                                    elif day > self.getMonth(month,year) or day < 1:
                                        out = "该身份证的出生日期错误！\n\n" + out + birday
                                    else:
                                        try:
                                            randnum = int(ID[14:16])
                                        except:
                                            messagebox.showerror('错误','身份证号码必须为数字！')
                                        else:
                                            try:
                                                sex = int(ID[16:17])
                                                code = ID[17:18]
                                            except:
                                                messagebox.showerror('错误','身份证号码必须为数字！')
                                            else:
                                                if sex in [1, 3, 5, 7, 9]:
                                                    out += birday + "性别：男性\n"
                                                else:
                                                    out += birday + "性别：女性\n"
                                                #年龄
                                                current_time = self.common.getSystime()
                                                diff = int(current_time[0:4])- year
                                                if current_time[4:8] > ID[10:14]:
                                                    out += "年龄：{}\n".format(diff)
                                                else:
                                                    out += "年龄：{}\n".format(diff-1)
                                                #星座
                                                sign,zodiac = dc.getSigns(ID[6:14])
                                                out += "星座：{}\n".format(sign)
                                                #生肖
                                                out += "生肖：{}\n".format(zodiac)
                                                result = dc.getID(ID)
                                                if result != -1:
                                                    out = "该身份证校验码错误！\n\n正确身份证号是：{}\n".format(ID[:17]+str(result))+ out                                                                                  
                            else:
                                out = "该身份证的地区码错误！\n\n" + "出生地址：{0}".format(self.idcards[prov] + self.idcards[city])
                        else:
                            out = "该身份证的地区码错误！\n\n" + "出生地址：{0}".format(self.idcards[prov])    
                    else:
                        out = "该身份证的地区码错误！"
                    self.text2_3.insert(END, "{}".format(out))

    def startapp(self, app):
        self.app6_1.destroy()
        self.app6_2.destroy()
        self.app6_3.destroy()
        #self.master.withdraw()
        eval(app)(self.master)

@myLog('test_tools')
class Application7(Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.common = Common()        
        self.app7 = Frame(self.master)
        self.app7.pack()       
        self.create_widgets()

    def create_widgets(self):
        menu = Menu(self.master)
        self.file_menu = Menu(menu, tearoff=False)
        self.file_menu1 = Menu(self.file_menu, tearoff=False)
        menu.add_cascade(label='帮助(H)', menu=self.file_menu)
        menu.add_command(label="1-加密解密", command=lambda: self.startapp('Application'))
        menu.add_command(label="2-实时加密", command=lambda: self.startapp('Application2'))
        menu.add_command(label="3-测试数据", command=lambda: self.startapp('Application3'))
        menu.add_command(label="4-格式数据", command=lambda: self.startapp('Application4'))
        menu.add_command(label="5-二维码", command=lambda: self.startapp('Application5'))    
        menu.add_command(label="6-身份证", command=lambda: self.startapp('Application6'))
        menu.add_command(label="7-HTTP请求")
        self.file_menu.add_cascade(label="关于工具", menu = self.file_menu1)
        self.file_menu.add_command(label="版本更新", command = UpdateTool().upgrade)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="退出", command=self.app7.quit)
        self.text = filter(None, UpdateTool().info().split("\n"))
        for text in self.text:
            self.file_menu1.add_command(label=text.strip())        
        self.master.config(menu=menu)
        Label(self.app7, text="URL地址", font=("宋体", 10), justify="left",anchor="center").grid(row=0, column=0, padx=5, pady=10)
        self.method = Combobox(self.app7, value=('POST', 'GET'), width=6, state="readonly")
        self.method.grid(row=1, column=0, padx=5, pady=10)
        self.method.current(0)
        self.input = Entry(self.app7, width=75, textvariable=StringVar())
        self.input.grid(row=1, column=1, padx=5, pady=10)
        self.input.focus_set()
        #Entry(root, textvariable=Variable(),show="*").grid(row=3, column=2, padx=10, pady=10)
        #vbar = Scrollbar(root, orient=VERTICAL).grid(row=5, column=3, padx=10, pady=10)
        Label(self.app7, text="Headers", font=("宋体", 10)).grid(row=2, column=0, padx=5, pady=10)
        Label(self.app7, text="参数设置", font=("宋体", 10)).grid(row=3, column=0, padx=5, pady=10)
        self.cmb7 = Combobox(self.app7, width=72, state="readonly")
        self.cmb7['value'] = ('application/json;charset=utf-8','application/x-www-form-urlencoded;charset=utf-8')
        self.cmb7.grid(row=2, column=1, padx=5, pady=10, sticky='W')
        self.cmb7.current(0)
        self.param = Entry(self.app7, width=75, textvariable=StringVar())
        self.param.grid(row=3, column=1, padx=5, pady=10)
        self.param.insert(0, '{"name":"lw","date":"2022"}')  
        Button(self.app7, text="发送", command=self.main).grid(row=1, column=2, padx=5, pady=10)
        self.output = scrolledtext.ScrolledText(self.app7, width=92, height=23, font=("宋体", 10), background='#ffffff')
        self.output.grid(row=4, column=0, columnspan=3, padx=5, pady=10)
        self.master.bind("<Button-3>", self.showMenu)
        self.checkRule = BooleanVar()
        Checkbutton(self.app7,text='SIGN',variable=self.checkRule).grid(row=3, column=2, padx=5, pady=10)

    def showMenu(self,event):
        self.file_menu1.post(event.x_root, event.y_root)
    
    @myLog('test_tools')
    def main(self):
        self.output.delete(0.0, END)
        url = self.input.get()
        method = self.method.get()
        params = self.param.get()
        if not url.strip():
            return messagebox.showerror('错误','URL地址不能为空！')        
        url = "https://" + url if 'http' not in url else url
        MutilProcess.mutilThread(self.responsed,url,method,params)
        self.output.insert(END, MutilProcess.results[0]) 
    
    @myLog('test_tools')
    def responsed(self,url,method,params):
        checkRule = self.checkRule.get()
        output = "请求URL地址：{0}\n".format(url)
        header = {"User-Agent":"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Mobile Safari/537.36"}
        formdata = None
        new_url = url.strip()
        if checkRule:
            self.ent = Cpcn()
            params = self.ent.creatRequest(params)        
        if params:
            params_json = dc.formatJson(params,0,False,1) # dict
            if method == 'POST':
                # 默认使用form表单 application/x-www-form-urlencoded;charset=utf-8
                header["Content-Type"] = self.cmb7.get() # 指定传body-json
                if isinstance(params_json,int) or 'error_code' in params_json:
                    return dc.checkJson({"error_code" : "0001",
                                         "message" : "Json格式错误！"}) 
                if "json" in self.cmb7.get():
                    formdata = dc.formatJson(params).encode('utf-8') # json
                else:
                    # urlencode把字典类型数据中文转为utf8编码以‘%’开头
                    formdata = urllib.parse.urlencode(params_json).encode('utf-8')
            else: # ----GET # quote只能用于string类型
                form_param = dc.formatJson(params, 2) # 转成k=v
                if 'error_code' not in params_json:
                    params = form_param  # 只有json下 才需要执行2
                if 'error_code' not in form_param:   
                    output += "请求报文：\n{0}\n".format(form_param) # 展示get/json间的互转                
                _param = urllib.request.quote(params)
                new_url = url.rstrip("/") + "/" + _param if _param else url.strip()
        output = output.replace(url, new_url, 1)
        # myLog(1).debug(formdata)
        _request = urllib.request.Request(url=new_url, data=formdata, headers=header, method=method)
        with request.urlopen(_request, timeout=10) as resp:
            _url = resp.geturl()
            _headers = resp.info() # 响应报文 #f.getheaders() -- list
            response = resp.read().decode('utf-8')
            if checkRule:
                response = self.ent.decodeResponse(response, checkRule)
            if 'json' in resp.getheader("Content-Type") and not checkRule:
                response = dc.formatJson(response)# json
        output += "响应报文：\n{0}\n响应信息：\n{1}\n".format(_headers,response)

        return output

    def startapp(self, app):
        self.app7.destroy()
        eval(app)(self.master)        

if __name__ == '__main__':
    root = Tk()
    Base(root)
    root.mainloop()
